#!/bin/bash
#set -x

version='0.3.5'

if [[ $TESTNET_ENABLED == 'true' ]]; then
    NODE_MAGIC="--testnet-magic 1097911063"
else
    NODE_MAGIC="--mainnet"
fi

if [[ $BLOCKFROST_ENABLED == 'true' ]]; then
    BLOCKFROST_PROJECT_ID=$BLOCKFROST_PROJECT
fi

if [[ ${DB_SYNC_ENABLED} == 'true' ]]; then
    export POSTGRES_HOST=$(cat ~/.pgpass | awk -F ':' '{print $1}')
    export POSTGRES_DB=$(cat ~/.pgpass | awk -F ':' '{print $3}')
    export POSTGRES_USER=$(cat ~/.pgpass | awk -F ':' '{print $4}')
fi

mkdir -p $CARDO_HOME/transactions/
mkdir -p $CARDO_HOME/wallets/
mkdir -p $CARDO_HOME/logs/

function send {
    
    PAYMENT_ADDR=$(cat $CARDO_HOME/wallets/$1.addr)
    OUTPUT_ADDR=$4
    ADA_OUT=$(echo "($3 * 1000000) / 1" | bc)

    i=0

    if [ ! -f $CARDO_HOME/logs/$1_tx_log.csv ]; then
        touch $CARDO_HOME/logs/$1_tx_log.csv
        echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/$1_tx_log.csv
    fi

    while [ $i -lt $2 ]; do

        mkdir -p $CARDO_HOME/transactions/$1/

        if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
            UTXO=$(curl -s -H "project_id: $BLOCKFROST_PROJECT_ID" https://cardano-mainnet.blockfrost.io/api/v0/addresses/${PAYMENT_ADDR}/utxos)
        else
            UTXO=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')
        fi

        TOTALADA_BF=()
        TXPOLIC_BF=()
        TXTOKAMT=()
        TXIN=()
        TXCOUNT=0

        if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
        
            TXHASH_ARR=($(echo ${UTXO} | jq -r .[].tx_hash))
            TXID_ARR=($(echo ${UTXO} | jq -r .[].tx_index))
            TXAMT_ARR=($(echo ${UTXO} | jq -c .[].amount))

            x=0

            for llamount in "${TXAMT_ARR[@]}"; do

                TXAMT=$(echo $llamount | jq -r '.[] | select(.unit=="lovelace") | .quantity')
                TOTALADA_BF+=($TXAMT)

                TXTOK=($(echo $llamount | jq -c '.[] | select(.unit!="lovelace")'))

                if [[ ! -z "${TXTOK[*]}" ]]; then

                    for tok in "${TXTOK[@]}"; do
                        TXTOK_UNIT=$(echo "${tok}" | jq -r .unit)
                        TXTOK_AMT=$(echo "${tok}" | jq -r .quantity)

                        TXTOK_POL=${TXTOK_UNIT::56}
                        TXTOK_ID=${TXTOK_UNIT:56}

                        TXPOLIC_BF+=("${TXTOK_POL}.${TXTOK_ID}")
                        TXPOLIC_BF_NODOT+=("${TXTOK_POL}${TXTOK_ID}")
                    done

                fi     

            done

            while [[ $x -lt ${#TXHASH_ARR[@]} ]]; do

                TXIN+=("--tx-in \"${TXHASH_ARR[$x]}#${TXID_ARR[$x]}\"")
                TXCOUNT=$[$TXCOUNT+1]
                x=$[$x+1]

            done

            TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
            TXPOLIC_NODOT=($(echo "${TXPOLIC_BF_NODOT[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

            for tok in "${TXPOLIC_NODOT[@]}"; do
                TOKAMT_BF=($(echo ${TXAMT_ARR[*]} | jq -r ".[] | select(.unit==\"$tok\") | .quantity"))
                TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
            done

        else

            while IFS= read -r line; do

                if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                    TXHASH=$(echo $line | awk '{print $1}')
                    TXID=$(echo $line | awk '{print $2}')
                    TXAMT=$(echo $line | awk '{print $3}')

                    TXIN+=("--tx-in \"${TXHASH}#${TXID}\"")
                    TOTALADA_BF+=($TXAMT)
                    TXCOUNT=$[$TXCOUNT+1]
                elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                    TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
                fi

            done <<< "${UTXO}"

            TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

            for tok in ${TXPOLIC[@]}; do
                TOKLIST=$(echo "${UTXO}" | grep -w $tok)
                TOKAMT_BF=()

                while IFS= read -r line; do
                    TOKAMT_BF+=($(echo $line | awk '{print $1}'))
                done <<< "${TOKLIST}"

                TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
            done

        fi

        TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")
        num=0

        SENDALL=""
        SENDSELF=""

        while [[ $num -lt ${#TXPOLIC[@]} ]]; do

            if [[ "$5" == "--send-all" ]]; then
                SENDALL="${SENDALL}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
            else
                SENDSELF="${SENDSELF}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
            fi

            num=$[$num+1]

        done

        cardano-cli query protocol-parameters \
        ${NODE_MAGIC} \
        --out-file $CARDO_HOME/transactions/$1/protocol${i}.json

        echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADA_OUT}${SENDALL} --tx-out ${PAYMENT_ADDR}+0${SENDSELF} --fee 0 --out-file $CARDO_HOME/transactions/$1/tx${i}.draft" > $CARDO_HOME/transactions/$1/build_draft_${i}.sh
        chmod 755 $CARDO_HOME/transactions/$1/build_draft_${i}.sh
        $CARDO_HOME/transactions/$1/build_draft_${i}.sh

        cardano-cli transaction calculate-min-fee \
        --tx-body-file $CARDO_HOME/transactions/$1/tx${i}.draft \
        --tx-in-count $TXCOUNT \
        --tx-out-count 1 \
        --witness-count $TXCOUNT \
        --byron-witness-count 0 \
        ${NODE_MAGIC} \
        --protocol-params-file $CARDO_HOME/transactions/$1/protocol${i}.json | tee $CARDO_HOME/transactions/$1/fees${i}

        TXFEE=$(cat $CARDO_HOME/transactions/$1/fees${i} | awk '{print $1}')
        ADABACK=$(($TOTALADA - $ADA_OUT - $TXFEE))

        echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADA_OUT}${SENDALL} --tx-out ${PAYMENT_ADDR}+${ADABACK}${SENDSELF} --fee ${TXFEE} --out-file $CARDO_HOME/transactions/$1/tx${i}.raw" > $CARDO_HOME/transactions/$1/build_raw_${i}.sh
        chmod 755 $CARDO_HOME/transactions/$1/build_raw_${i}.sh
        $CARDO_HOME/transactions/$1/build_raw_${i}.sh

        cardano-cli transaction sign \
        --tx-body-file $CARDO_HOME/transactions/$1/tx${i}.raw \
        --signing-key-file $CARDO_HOME/wallets/$1.skey \
        ${NODE_MAGIC} \
        --out-file $CARDO_HOME/transactions/$1/tx${i}.signed

        cardano-cli transaction submit \
        --tx-file $CARDO_HOME/transactions/$1/tx${i}.signed \
        ${NODE_MAGIC}

        TXSENTDATE=$(date +%T)
        echo "Transaction #`expr $i + 1` SENT at $TXSENTDATE!"

        TX_DONE="FALSE"

        while [[ "$TX_DONE" == "FALSE" ]]; do

            if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
                sleep 5
                UTXO_AF=$(curl -s -H "project_id: $BLOCKFROST_PROJECT_ID" https://cardano-mainnet.blockfrost.io/api/v0/addresses/${PAYMENT_ADDR}/utxos)
            else
                UTXO_AF=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')
            fi

            TOTALADA_AF=()

            if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then

                TXAMT_ARR=($(echo ${UTXO_AF} | jq -c .[].amount))
                x=0

                for llamount in "${TXAMT_ARR[@]}"; do
                    TXAMT=$(echo $llamount | jq -r '.[] | select(.unit=="lovelace") | .quantity')
                    TOTALADA_AF+=($TXAMT)
                done

            else

                while IFS= read -r line; do

                    if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                        TXAMT=$(echo $line | awk '{print $3}')
                        TOTALADA_AF+=($TXAMT)
                        TXCOUNT=$[$TXCOUNT+1]
                    fi

                done <<< "${UTXO_AF}"
            
            fi

            TOTALADA_AF_DONE=$(IFS=+; echo "$((${TOTALADA_AF[*]}))")

            if [[ "$TOTALADA_AF_DONE" != "$TOTALADA" ]]; then
                TX_DONE="TRUE"
            fi

        done

        i=$(($i + 1))
        TXDONEDATE=$(date +%T)
        echo -e "Transaction #$i CONFIRMED at $TXDONEDATE!\n"

        rm -rf $CARDO_HOME/transactions/$1/*

        line_number=$(cat $CARDO_HOME/logs/$1_tx_log.csv | wc -l)

        echo "$line_number,`echo "scale = 2; $ADA_OUT / 1000000" | bc`,`echo "scale = 3; $TXFEE / 1000000" | bc | sed 's/^\$CARDO_HOME/0$CARDO_HOME/'`,$PAYMENT_ADDR,$OUTPUT_ADDR,$(date +%T)" >> $CARDO_HOME/logs/$1_tx_log.csv

    done
    
}

function nochecksend {
    
    PAYMENT_ADDR=$(cat $CARDO_HOME/wallets/$1.addr)
    OUTPUT_ADDR=$4
    ADA_OUT=$(echo "($3 * 1000000) / 1" | bc)

    i=0

    if [ ! -f $CARDO_HOME/logs/$1_tx_log.csv ]; then
        touch $CARDO_HOME/logs/$1_tx_log.csv
        echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/$1_tx_log.csv
    fi

    while [ $i -lt 1 ]; do

        mkdir -p $CARDO_HOME/transactions/$1/

        if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
            UTXO=$(curl -s -H "project_id: $BLOCKFROST_PROJECT_ID" https://cardano-mainnet.blockfrost.io/api/v0/addresses/${PAYMENT_ADDR}/utxos)
        else
            UTXO=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')
        fi

        TOTALADA_BF=()
        TXPOLIC_BF=()
        TXTOKAMT=()
        TXIN=()
        TXCOUNT=0

        if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
        
            TXHASH_ARR=($(echo ${UTXO} | jq -r .[].tx_hash))
            TXID_ARR=($(echo ${UTXO} | jq -r .[].tx_index))
            TXAMT_ARR=($(echo ${UTXO} | jq -c .[].amount))

            x=0

            for llamount in "${TXAMT_ARR[@]}"; do

                TXAMT=$(echo $llamount | jq -r '.[] | select(.unit=="lovelace") | .quantity')
                TOTALADA_BF+=($TXAMT)

                TXTOK=($(echo $llamount | jq -c '.[] | select(.unit!="lovelace")'))

                if [[ ! -z "${TXTOK[*]}" ]]; then

                    for tok in "${TXTOK[@]}"; do
                        TXTOK_UNIT=$(echo "${tok}" | jq -r .unit)
                        TXTOK_AMT=$(echo "${tok}" | jq -r .quantity)

                        TXTOK_POL=${TXTOK_UNIT::56}
                        TXTOK_ID=${TXTOK_UNIT:56}

                        TXPOLIC_BF+=("${TXTOK_POL}.${TXTOK_ID}")
                        TXPOLIC_BF_NODOT+=("${TXTOK_POL}${TXTOK_ID}")
                    done

                fi     

            done

            while [[ $x -lt ${#TXHASH_ARR[@]} ]]; do

                TXIN+=("--tx-in \"${TXHASH_ARR[$x]}#${TXID_ARR[$x]}\"")
                TXCOUNT=$[$TXCOUNT+1]
                x=$[$x+1]

            done

            TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
            TXPOLIC_NODOT=($(echo "${TXPOLIC_BF_NODOT[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

            for tok in "${TXPOLIC_NODOT[@]}"; do
                TOKAMT_BF=($(echo ${TXAMT_ARR[*]} | jq -r ".[] | select(.unit==\"$tok\") | .quantity"))
                TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
            done

        else

            while IFS= read -r line; do

                if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                    TXHASH=$(echo $line | awk '{print $1}')
                    TXID=$(echo $line | awk '{print $2}')
                    TXAMT=$(echo $line | awk '{print $3}')

                    TXIN+=("--tx-in \"${TXHASH}#${TXID}\"")
                    TOTALADA_BF+=($TXAMT)
                    TXCOUNT=$[$TXCOUNT+1]
                elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                    TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
                fi

            done <<< "${UTXO}"

            TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

            for tok in ${TXPOLIC[@]}; do
                TOKLIST=$(echo "${UTXO}" | grep -w $tok)
                TOKAMT_BF=()

                while IFS= read -r line; do
                    TOKAMT_BF+=($(echo $line | awk '{print $1}'))
                done <<< "${TOKLIST}"

                TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
            done

        fi

        TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")
        num=0

        SENDALL=""
        SENDSELF=""

        while [[ $num -lt ${#TXPOLIC[@]} ]]; do
            if [[ "$5" == "--send-all" ]]; then
                SENDALL="${SENDALL}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
            else
                SENDSELF="${SENDSELF}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
            fi

            num=$[$num+1]
        done

        cardano-cli query protocol-parameters \
        ${NODE_MAGIC} \
        --out-file $CARDO_HOME/transactions/$1/protocol${i}.json

        echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADA_OUT}${SENDALL} --tx-out ${PAYMENT_ADDR}+0${SENDSELF} --fee 0 --out-file $CARDO_HOME/transactions/$1/tx${i}.draft" > $CARDO_HOME/transactions/$1/build_draft_${i}.sh
        chmod 755 $CARDO_HOME/transactions/$1/build_draft_${i}.sh
        $CARDO_HOME/transactions/$1/build_draft_${i}.sh

        cardano-cli transaction calculate-min-fee \
        --tx-body-file $CARDO_HOME/transactions/$1/tx${i}.draft \
        --tx-in-count $TXCOUNT \
        --tx-out-count 1 \
        --witness-count $TXCOUNT \
        --byron-witness-count 0 \
        ${NODE_MAGIC} \
        --protocol-params-file $CARDO_HOME/transactions/$1/protocol${i}.json | tee $CARDO_HOME/transactions/$1/fees${i}

        TXFEE=$(cat $CARDO_HOME/transactions/$1/fees${i} | awk '{print $1}')
        ADABACK=$(($TOTALADA - $ADA_OUT - $TXFEE))

        echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADA_OUT}${SENDALL} --tx-out ${PAYMENT_ADDR}+${ADABACK}${SENDSELF} --fee ${TXFEE} --out-file $CARDO_HOME/transactions/$1/tx${i}.raw" > $CARDO_HOME/transactions/$1/build_raw_${i}.sh
        chmod 755 $CARDO_HOME/transactions/$1/build_raw_${i}.sh
        $CARDO_HOME/transactions/$1/build_raw_${i}.sh

        cardano-cli transaction sign \
        --tx-body-file $CARDO_HOME/transactions/$1/tx${i}.raw \
        --signing-key-file $CARDO_HOME/wallets/$1.skey \
        ${NODE_MAGIC} \
        --out-file $CARDO_HOME/transactions/$1/tx${i}.signed

        cardano-cli transaction submit \
        --tx-file $CARDO_HOME/transactions/$1/tx${i}.signed \
        ${NODE_MAGIC}

        TXSENTDATE=$(date +%T)
        echo "Transaction #`expr $i + 1` SENT at $TXSENTDATE!"

        i=$(($i + 1))

        rm -rf $CARDO_HOME/transactions/$1/*

        line_number=$(cat $CARDO_HOME/logs/$1_tx_log.csv | wc -l)

        echo "$line_number,`echo "scale = 2; $ADA_OUT / 1000000" | bc`,`echo "scale = 3; $TXFEE / 1000000" | bc | sed 's/^\$CARDO_HOME/0$CARDO_HOME/'`,$PAYMENT_ADDR,$OUTPUT_ADDR,$(date +%T)" >> $CARDO_HOME/logs/$1_tx_log.csv

    done
}

function empty {
    
    PAYMENT_ADDR=$(cat $CARDO_HOME/wallets/$1.addr)
    OUTPUT_ADDR=$2

    i=0

    if [ ! -f $CARDO_HOME/logs/$1_tx_log.csv ]; then
        touch $CARDO_HOME/logs/$1_tx_log.csv
        echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/$1_tx_log.csv
    fi

    while [ $i -lt 1 ]; do

        mkdir -p $CARDO_HOME/transactions/$1/

        UTXO=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')

        TOTALADA_BF=()
        TXPOLIC_BF=()
        TXIN=()
        TXCOUNT=0

        while IFS= read -r line; do

            if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                TXHASH=$(echo $line | awk '{print $1}')
                TXID=$(echo $line | awk '{print $2}')
                TXAMT=$(echo $line | awk '{print $3}')

                TXIN+=("--tx-in \"${TXHASH}#${TXID}\"")
                TOTALADA_BF+=($TXAMT)
                TXCOUNT=$[$TXCOUNT+1]
            elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
            fi

        done <<< "${UTXO}"

        TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

        TXTOKAMT=()

        for tok in ${TXPOLIC[@]}; do
            TOKLIST=$(echo "${UTXO}" | grep -w $tok)
            TOKAMT_BF=()

            while IFS= read -r line; do
                TOKAMT_BF+=($(echo $line | awk '{print $1}'))
            done <<< "${TOKLIST}"

            TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
        done

        TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")
        num=0

        SENDALL=""
        SENDSELF=""

        while [[ $num -lt ${#TXPOLIC[@]} ]]; do
            SENDALL="${SENDALL}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
            num=$[$num+1]
        done

        cardano-cli query protocol-parameters \
        ${NODE_MAGIC} \
        --out-file $CARDO_HOME/transactions/$1/protocol${i}.json

        echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+0${SENDALL} --fee 0 --out-file $CARDO_HOME/transactions/$1/tx${i}.draft" > $CARDO_HOME/transactions/$1/build_draft_${i}.sh
        chmod 755 $CARDO_HOME/transactions/$1/build_draft_${i}.sh
        $CARDO_HOME/transactions/$1/build_draft_${i}.sh

        cardano-cli transaction calculate-min-fee \
        --tx-body-file $CARDO_HOME/transactions/$1/tx${i}.draft \
        --tx-in-count $TXCOUNT \
        --tx-out-count 1 \
        --witness-count $TXCOUNT \
        --byron-witness-count 0 \
        ${NODE_MAGIC} \
        --protocol-params-file $CARDO_HOME/transactions/$1/protocol${i}.json | tee $CARDO_HOME/transactions/$1/fees${i}

        TXFEE=$(cat $CARDO_HOME/transactions/$1/fees${i} | awk '{print $1}')
        ADABACK=$(($TOTALADA - $TXFEE))

        echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADABACK}${SENDALL} --fee ${TXFEE} --out-file $CARDO_HOME/transactions/$1/tx${i}.raw" > $CARDO_HOME/transactions/$1/build_raw_${i}.sh
        chmod 755 $CARDO_HOME/transactions/$1/build_raw_${i}.sh
        $CARDO_HOME/transactions/$1/build_raw_${i}.sh

        cardano-cli transaction sign \
        --tx-body-file $CARDO_HOME/transactions/$1/tx${i}.raw \
        --signing-key-file $CARDO_HOME/wallets/$1.skey \
        ${NODE_MAGIC} \
        --out-file $CARDO_HOME/transactions/$1/tx${i}.signed

        cardano-cli transaction submit \
        --tx-file $CARDO_HOME/transactions/$1/tx${i}.signed \
        ${NODE_MAGIC}

        TXSENTDATE=$(date +%T)
        echo "Transaction #`expr $i + 1` SENT at $TXSENTDATE!"

        TX_DONE="FALSE"

        while [[ "$TX_DONE" == "FALSE" ]]; do

            UTXO_AF=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')

            TOTALADA_AF=()

            while IFS= read -r line; do

                if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                    TXAMT=$(echo $line | awk '{print $3}')
                    TOTALADA_AF+=($TXAMT)
                    TXCOUNT=$[$TXCOUNT+1]
                fi

            done <<< "${UTXO_AF}"

            TOTALADA_AF_DONE=$(IFS=+; echo "$((${TOTALADA_AF[*]}))")

            if [[ "$TOTALADA_AF_DONE" != "$TOTALADA" ]]; then
                TX_DONE="TRUE"
            fi

        done

        i=$(($i + 1))
        TXDONEDATE=$(date +%T)
        echo -e "Transaction #$i CONFIRMED at $TXDONEDATE!\n"

        rm -rf $CARDO_HOME/transactions/$1/*

        line_number=$(cat $CARDO_HOME/logs/$1_tx_log.csv | wc -l)

        echo "$line_number,`echo "scale = 2; $ADABACK / 1000000" | bc`,`echo "scale = 3; $TXFEE / 1000000" | bc | sed 's/^\$CARDO_HOME/0$CARDO_HOME/'`,$PAYMENT_ADDR,$OUTPUT_ADDR,$(date +%T)" >> $CARDO_HOME/logs/$1_tx_log.csv

    done
}

function multisend {
    
    ADDR_LIST=($(ls $CARDO_HOME/wallets/$1*.addr))
    OUTPUT_ADDR=$3
    ADA_OUT=$(echo "($2 * 1000000) / 1" | bc)

    for addr in "${ADDR_LIST[@]}"
    do 

        i=0

        PAYMENT_ADDR=$(cat $addr)
        ADDR_NAME=${addr#$CARDO_HOME/wallets/}
        ADDR_NAME=${ADDR_NAME%%.addr}

        if [ ! -f $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv ]; then
            touch $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
            echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
        fi

        while [ $i -lt 1 ]; do

            mkdir -p $CARDO_HOME/transactions/${ADDR_NAME}/

            if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
                UTXO=$(curl -s -H "project_id: $BLOCKFROST_PROJECT_ID" https://cardano-mainnet.blockfrost.io/api/v0/addresses/${PAYMENT_ADDR}/utxos)
            else
                UTXO=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')
            fi

            echo ${UTXO} > $CARDO_HOME/transactions/${ADDR_NAME}/utxo${i}

            TOTALADA_BF=()
            TXPOLIC_BF=()
            TXTOKAMT=()
            TXIN=()
            TXCOUNT=0

            if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
            
                TXHASH_ARR=($(echo ${UTXO} | jq -r .[].tx_hash))
                TXID_ARR=($(echo ${UTXO} | jq -r .[].tx_index))
                TXAMT_ARR=($(echo ${UTXO} | jq -c .[].amount))

                x=0

                for llamount in "${TXAMT_ARR[@]}"; do

                    TXAMT=$(echo $llamount | jq -r '.[] | select(.unit=="lovelace") | .quantity')
                    TOTALADA_BF+=($TXAMT)

                    TXTOK=($(echo $llamount | jq -c '.[] | select(.unit!="lovelace")'))

                    if [[ ! -z "${TXTOK[*]}" ]]; then

                        for tok in "${TXTOK[@]}"; do
                            TXTOK_UNIT=$(echo "${tok}" | jq -r .unit)
                            TXTOK_AMT=$(echo "${tok}" | jq -r .quantity)

                            TXTOK_POL=${TXTOK_UNIT::56}
                            TXTOK_ID=${TXTOK_UNIT:56}

                            TXPOLIC_BF+=("${TXTOK_POL}.${TXTOK_ID}")
                            TXPOLIC_BF_NODOT+=("${TXTOK_POL}${TXTOK_ID}")
                        done

                    fi     

                done

                while [[ $x -lt ${#TXHASH_ARR[@]} ]]; do

                    TXIN+=("--tx-in \"${TXHASH_ARR[$x]}#${TXID_ARR[$x]}\"")
                    TXCOUNT=$[$TXCOUNT+1]
                    x=$[$x+1]

                done

                TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
                TXPOLIC_NODOT=($(echo "${TXPOLIC_BF_NODOT[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

                for tok in "${TXPOLIC_NODOT[@]}"; do
                    TOKAMT_BF=($(echo ${TXAMT_ARR[*]} | jq -r ".[] | select(.unit==\"$tok\") | .quantity"))
                    TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
                done

            else

                while IFS= read -r line; do

                    if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                        TXHASH=$(echo $line | awk '{print $1}')
                        TXID=$(echo $line | awk '{print $2}')
                        TXAMT=$(echo $line | awk '{print $3}')

                        TXIN+=("--tx-in \"${TXHASH}#${TXID}\"")
                        TOTALADA_BF+=($TXAMT)
                        TXCOUNT=$[$TXCOUNT+1]
                    elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                        TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
                    fi

                done <<< "${UTXO}"

                TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

                for tok in ${TXPOLIC[@]}; do
                    TOKLIST=$(echo "${UTXO}" | grep -w $tok)
                    TOKAMT_BF=()

                    while IFS= read -r line; do
                        TOKAMT_BF+=($(echo $line | awk '{print $1}'))
                    done <<< "${TOKLIST}"

                    TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
                done

            fi

            TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")
            num=0

            SENDALL=""
            SENDSELF=""

            while [[ $num -lt ${#TXPOLIC[@]} ]]; do
                if [[ "$4" == "--send-all" ]]; then
                    SENDALL="${SENDALL}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
                else
                    SENDSELF="${SENDSELF}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
                fi

                num=$[$num+1]
            done

            cardano-cli query protocol-parameters \
            ${NODE_MAGIC} \
            --out-file $CARDO_HOME/transactions/${ADDR_NAME}/protocol${i}.json

            echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADA_OUT}${SENDALL} --tx-out ${PAYMENT_ADDR}+0${SENDSELF} --fee 0 --out-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.draft" > $CARDO_HOME/transactions/${ADDR_NAME}/build_draft_${i}.sh
            chmod 755 $CARDO_HOME/transactions/${ADDR_NAME}/build_draft_${i}.sh
            $CARDO_HOME/transactions/${ADDR_NAME}/build_draft_${i}.sh

            cardano-cli transaction calculate-min-fee \
            --tx-body-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.draft \
            --tx-in-count $TXCOUNT \
            --tx-out-count 1 \
            --witness-count $TXCOUNT \
            --byron-witness-count 0 \
            ${NODE_MAGIC} \
            --protocol-params-file $CARDO_HOME/transactions/${ADDR_NAME}/protocol${i}.json | tee $CARDO_HOME/transactions/${ADDR_NAME}/fees${i}

            TXFEE=$(cat $CARDO_HOME/transactions/${ADDR_NAME}/fees${i} | awk '{print $1}')
            ADABACK=$(($TOTALADA - $ADA_OUT - $TXFEE))

            echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADA_OUT}${SENDALL} --tx-out ${PAYMENT_ADDR}+${ADABACK}${SENDSELF} --fee ${TXFEE} --out-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.raw" > $CARDO_HOME/transactions/${ADDR_NAME}/build_raw_${i}.sh
            chmod 755 $CARDO_HOME/transactions/${ADDR_NAME}/build_raw_${i}.sh
            $CARDO_HOME/transactions/${ADDR_NAME}/build_raw_${i}.sh

            cardano-cli transaction sign \
            --tx-body-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.raw \
            --signing-key-file $CARDO_HOME/wallets/${ADDR_NAME}.skey \
            ${NODE_MAGIC} \
            --out-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.signed

            cardano-cli transaction submit \
            --tx-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.signed \
            ${NODE_MAGIC}

            TXSENTDATE=$(date +%T)
            echo "Transaction for $ADDR_NAME SENT at $TXSENTDATE!"

            i=$(($i + 1))

        done

    done

    echo -e "\n"

    for addr in "${ADDR_LIST[@]}"
    do 

        i=0
        PAYMENT_ADDR=$(cat $addr)
        ADDR_NAME=${addr#$CARDO_HOME/wallets/}
        ADDR_NAME=${ADDR_NAME%%.addr}

        if [ ! -f $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv ]; then
            touch $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
            echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
        fi

        while [ $i -lt 1 ]; do
            TX_DONE="FALSE"

            UTXO=$(cat $CARDO_HOME/transactions/${ADDR_NAME}/utxo${i})

            TOTALADA_BF=()

            if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then

                TXAMT_ARR=($(echo ${UTXO} | jq -c .[].amount))
                x=0

                for llamount in "${TXAMT_ARR[@]}"; do
                    TXAMT=$(echo $llamount | jq -r '.[] | select(.unit=="lovelace") | .quantity')
                    TOTALADA_BF+=($TXAMT)
                done

            else

                while IFS= read -r line; do

                    if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                        TXAMT=$(echo $line | awk '{print $3}')
                        TOTALADA_BF+=($TXAMT)
                    fi

                done <<< "${UTXO}"
            
            fi

            TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")

            while [[ "$TX_DONE" == "FALSE" ]]; do

                if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
                    sleep 5
                    UTXO_AF=$(curl -s -H "project_id: $BLOCKFROST_PROJECT_ID" https://cardano-mainnet.blockfrost.io/api/v0/addresses/${PAYMENT_ADDR}/utxos)
                else
                    UTXO_AF=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')
                fi

                TOTALADA_AF=()

                if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then

                    TXAMT_ARR=($(echo ${UTXO_AF} | jq -c .[].amount))
                    x=0

                    for llamount in "${TXAMT_ARR[@]}"; do
                        TXAMT=$(echo $llamount | jq -r '.[] | select(.unit=="lovelace") | .quantity')
                        TOTALADA_AF+=($TXAMT)
                    done

                else

                    while IFS= read -r line; do

                        if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                            TXAMT=$(echo $line | awk '{print $3}')
                            TOTALADA_AF+=($TXAMT)
                            TXCOUNT=$[$TXCOUNT+1]
                        fi

                    done <<< "${UTXO_AF}"
                
                fi

                TOTALADA_AF_DONE=$(IFS=+; echo "$((${TOTALADA_AF[*]}))")

                if [[ "$TOTALADA_AF_DONE" != "$TOTALADA" ]]; then
                    TX_DONE="TRUE"
                fi

                rm -rf $CARDO_HOME/transactions/${ADDR_NAME}/utxo${i}

            done

            i=$(($i + 1))
            TXDONEDATE=$(date +%T)
            echo -e "Transaction for $ADDR_NAME CONFIRMED at $TXDONEDATE!"

            rm -rf $CARDO_HOME/transactions/${ADDR_NAME}/*

            line_number=$(cat $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv | wc -l)

            echo "$line_number,`echo "scale = 2; $ADA_OUT / 1000000" | bc`,`echo "scale = 3; $TXFEE / 1000000" | bc | sed 's/^\$CARDO_HOME/0$CARDO_HOME/'`,$PAYMENT_ADDR,$OUTPUT_ADDR,$(date +%T)" >> $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv

        done

    done
}

function multiout {
    
    PAYMENT_ADDR=$(cat $CARDO_HOME/wallets/$1.addr)
    OUTPUT_LIST=($(cat $3))
    OUTPUT_COUNT=$(cat $3 | wc -l)
    ADA_OUT_INIT=$(echo "($2 * 1000000) / 1" | bc)
    ADA_OUT=$(echo "($ADA_OUT_INIT * $OUTPUT_COUNT)" | bc)

    i=0

    if [ ! -f $CARDO_HOME/logs/$1_tx_log.csv ]; then
        touch $CARDO_HOME/logs/$1_tx_log.csv
        echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/$1_tx_log.csv
    fi

    while [ $i -lt 1 ]; do

        mkdir -p $CARDO_HOME/transactions/$1/

        UTXO=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')

        TOTALADA_BF=()
        TXPOLIC_BF=()
        TXIN=()
        TXCOUNT=0

        while IFS= read -r line; do

            if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                TXHASH=$(echo $line | awk '{print $1}')
                TXID=$(echo $line | awk '{print $2}')
                TXAMT=$(echo $line | awk '{print $3}')

                TXIN+=("--tx-in \"${TXHASH}#${TXID}\"")
                TOTALADA_BF+=($TXAMT)
                TXCOUNT=$[$TXCOUNT+1]
            elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
            fi

        done <<< "${UTXO}"

        TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

        TXTOKAMT=()

        for tok in ${TXPOLIC[@]}; do
            TOKLIST=$(echo "${UTXO}" | grep -w $tok)
            TOKAMT_BF=()

            while IFS= read -r line; do
                TOKAMT_BF+=($(echo $line | awk '{print $1}'))
            done <<< "${TOKLIST}"

            TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
        done

        TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")
        num=0

        SENDALL=""
        SENDSELF=""

        while [[ $num -lt ${#TXPOLIC[@]} ]]; do

            SENDSELF="${SENDSELF}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
            num=$[$num+1]

        done

        TXOUT=()
        TXOUTCOUNT=0

        for addr in "${OUTPUT_LIST[@]}"; do

            TXOUT+=("--tx-out \"${addr}+${ADA_OUT_INIT}\"")
            TXOUTCOUNT=$[$TXOUTCOUNT+1]

        done

        cardano-cli query protocol-parameters \
        ${NODE_MAGIC} \
        --out-file $CARDO_HOME/transactions/$1/protocol${i}.json

        echo "cardano-cli transaction build-raw ${TXIN[*]} ${TXOUT[*]} --tx-out ${PAYMENT_ADDR}+0${SENDSELF} --fee 0 --out-file $CARDO_HOME/transactions/$1/tx${i}.draft" > $CARDO_HOME/transactions/$1/build_draft_${i}.sh
        chmod 755 $CARDO_HOME/transactions/$1/build_draft_${i}.sh
        $CARDO_HOME/transactions/$1/build_draft_${i}.sh

        cardano-cli transaction calculate-min-fee \
        --tx-body-file $CARDO_HOME/transactions/$1/tx${i}.draft \
        --tx-in-count $TXCOUNT \
        --tx-out-count $TXOUTCOUNT \
        --witness-count $TXCOUNT \
        --byron-witness-count 0 \
        ${NODE_MAGIC} \
        --protocol-params-file $CARDO_HOME/transactions/$1/protocol${i}.json | tee $CARDO_HOME/transactions/$1/fees${i}

        TXFEE=$(cat $CARDO_HOME/transactions/$1/fees${i} | awk '{print $1}')
        ADABACK=$(($TOTALADA - $ADA_OUT - $TXFEE))

        echo "cardano-cli transaction build-raw ${TXIN[*]} ${TXOUT[*]} --tx-out ${PAYMENT_ADDR}+${ADABACK}${SENDSELF} --fee ${TXFEE} --out-file $CARDO_HOME/transactions/$1/tx${i}.raw" > $CARDO_HOME/transactions/$1/build_raw_${i}.sh
        chmod 755 $CARDO_HOME/transactions/$1/build_raw_${i}.sh
        $CARDO_HOME/transactions/$1/build_raw_${i}.sh

        cardano-cli transaction sign \
        --tx-body-file $CARDO_HOME/transactions/$1/tx${i}.raw \
        --signing-key-file $CARDO_HOME/wallets/$1.skey \
        ${NODE_MAGIC} \
        --out-file $CARDO_HOME/transactions/$1/tx${i}.signed

        cardano-cli transaction submit \
        --tx-file $CARDO_HOME/transactions/$1/tx${i}.signed \
        ${NODE_MAGIC}

        TXSENTDATE=$(date +%T)
        echo "Transaction #`expr $i + 1` SENT at $TXSENTDATE!"

        TX_DONE="FALSE"

        while [[ "$TX_DONE" == "FALSE" ]]; do

            UTXO_AF=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')

            TOTALADA_AF=()

            while IFS= read -r line; do

                if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                    TXAMT=$(echo $line | awk '{print $3}')
                    TOTALADA_AF+=($TXAMT)
                    TXCOUNT=$[$TXCOUNT+1]
                fi

            done <<< "${UTXO_AF}"

            TOTALADA_AF_DONE=$(IFS=+; echo "$((${TOTALADA_AF[*]}))")

            if [[ "$TOTALADA_AF_DONE" != "$TOTALADA" ]]; then
                TX_DONE="TRUE"
            fi

        done

        i=$(($i + 1))
        TXDONEDATE=$(date +%T)
        echo -e "Transaction #$i CONFIRMED at $TXDONEDATE!\n"

        rm -rf $CARDO_HOME/transactions/$1/*

        line_number=$(cat $CARDO_HOME/logs/$1_tx_log.csv | wc -l)

        for addr in "${OUTPUT_LIST[@]}"; do

            echo "$line_number,`echo "scale = 2; $ADA_OUT_INIT / 1000000" | bc`,`echo "scale = 3; $TXFEE / 1000000 / $OUTPUT_COUNT" | bc | sed 's/^\$CARDO_HOME/0$CARDO_HOME/'`,$PAYMENT_ADDR,$addr,$(date +%T)" >> $CARDO_HOME/logs/$1_tx_log.csv

        done

    done
}

function multiempty {
    
    ADDR_LIST=($(ls $CARDO_HOME/wallets/$1*.addr))
    OUTPUT_ADDR=$2

    for addr in "${ADDR_LIST[@]}"
    do 

        i=0

        PAYMENT_ADDR=$(cat $addr)
        ADDR_NAME=${addr#$CARDO_HOME/wallets/}
        ADDR_NAME=${ADDR_NAME%%.addr}

        if [ ! -f $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv ]; then
            touch $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
            echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
        fi

        while [ $i -lt 1 ]; do

            mkdir -p $CARDO_HOME/transactions/${ADDR_NAME}/

            UTXO=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')
            echo ${UTXO} > $CARDO_HOME/transactions/${ADDR_NAME}/utxo${i}

            TOTALADA_BF=()
            TXPOLIC_BF=()
            TXIN=()
            TXCOUNT=0

            while IFS= read -r line; do

                if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                    TXHASH=$(echo $line | awk '{print $1}')
                    TXID=$(echo $line | awk '{print $2}')
                    TXAMT=$(echo $line | awk '{print $3}')

                    TXIN+=("--tx-in \"${TXHASH}#${TXID}\"")
                    TOTALADA_BF+=($TXAMT)
                    TXCOUNT=$[$TXCOUNT+1]
                elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                    TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
                fi

            done <<< "${UTXO}"

            TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

            TXTOKAMT=()

            for tok in ${TXPOLIC[@]}; do
                TOKLIST=$(echo "${UTXO}" | grep -w $tok)
                TOKAMT_BF=()

                while IFS= read -r line; do
                    TOKAMT_BF+=($(echo $line | awk '{print $1}'))
                done <<< "${TOKLIST}"

                TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
            done

            TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")
            num=0

            SENDALL=""
            SENDSELF=""

            while [[ $num -lt ${#TXPOLIC[@]} ]]; do
                SENDALL="${SENDALL}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
                num=$[$num+1]
            done

            if [[ $TOTALADA == '0' ]]; then

                echo -e "Total ADA for ${ADDR_NAME} is less than 1, skipping..."

            else

                cardano-cli query protocol-parameters \
                ${NODE_MAGIC} \
                --out-file $CARDO_HOME/transactions/${ADDR_NAME}/protocol${i}.json

                echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+0${SENDALL} --fee 0 --out-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.draft" > $CARDO_HOME/transactions/${ADDR_NAME}/build_draft_${i}.sh
                chmod 755 $CARDO_HOME/transactions/${ADDR_NAME}/build_draft_${i}.sh
                $CARDO_HOME/transactions/${ADDR_NAME}/build_draft_${i}.sh

                cardano-cli transaction calculate-min-fee \
                --tx-body-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.draft \
                --tx-in-count $TXCOUNT \
                --tx-out-count 1 \
                --witness-count $TXCOUNT \
                --byron-witness-count 0 \
                ${NODE_MAGIC} \
                --protocol-params-file $CARDO_HOME/transactions/${ADDR_NAME}/protocol${i}.json | tee $CARDO_HOME/transactions/${ADDR_NAME}/fees${i}

                TXFEE=$(cat $CARDO_HOME/transactions/${ADDR_NAME}/fees${i} | awk '{print $1}')
                ADABACK=$(($TOTALADA - $TXFEE))

                echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADABACK}${SENDALL} --fee ${TXFEE} --out-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.raw" > $CARDO_HOME/transactions/${ADDR_NAME}/build_raw_${i}.sh
                chmod 755 $CARDO_HOME/transactions/${ADDR_NAME}/build_raw_${i}.sh
                $CARDO_HOME/transactions/${ADDR_NAME}/build_raw_${i}.sh

                cardano-cli transaction sign \
                --tx-body-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.raw \
                --signing-key-file $CARDO_HOME/wallets/${ADDR_NAME}.skey \
                ${NODE_MAGIC} \
                --out-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.signed

                cardano-cli transaction submit \
                --tx-file $CARDO_HOME/transactions/${ADDR_NAME}/tx${i}.signed \
                ${NODE_MAGIC}

                TXSENTDATE=$(date +%T)
                echo "Transaction for $ADDR_NAME SENT at $TXSENTDATE!"

            fi

            i=$(($i + 1))

        done

    done

    echo -e "\n"

    for addr in "${ADDR_LIST[@]}"
    do 

        i=0
        PAYMENT_ADDR=$(cat $addr)
        ADDR_NAME=${addr#$CARDO_HOME/wallets/}
        ADDR_NAME=${ADDR_NAME%%.addr}

        if [ ! -f $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv ]; then
            touch $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
            echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
        fi

        while [ $i -lt 1 ]; do
            TX_DONE="FALSE"

            UTXO=$(cat $CARDO_HOME/transactions/${ADDR_NAME}/utxo${i})

            TOTALADA_BF=()
            TXPOLIC_BF=()
            TXIN=()
            TXCOUNT=0

            while IFS= read -r line; do

                if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                    TXHASH=$(echo $line | awk '{print $1}')
                    TXID=$(echo $line | awk '{print $2}')
                    TXAMT=$(echo $line | awk '{print $3}')

                    TXIN+=("--tx-in \"${TXHASH}#${TXID}\"")
                    TOTALADA_BF+=($TXAMT)
                    TXCOUNT=$[$TXCOUNT+1]
                elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                    TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
                fi

            done <<< "${UTXO}"

            TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

            TXTOKAMT=()

            for tok in ${TXPOLIC[@]}; do
                TOKLIST=$(echo "${UTXO}" | grep -w $tok)
                TOKAMT_BF=()

                while IFS= read -r line; do
                    TOKAMT_BF+=($(echo $line | awk '{print $1}'))
                done <<< "${TOKLIST}"

                TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
            done

            TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")

            if [[ $TOTALADA == '0' ]]; then

                rm -rf $CARDO_HOME/transactions/${ADDR_NAME}/utxo${i}
                i=$(($i + 1))

            else

                while [[ "$TX_DONE" == "FALSE" ]]; do

                    UTXO_AF=$(cardano-cli query utxo ${NODE_MAGIC} --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')

                    TOTALADA_AF=()

                    while IFS= read -r line; do

                        if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                            TXAMT=$(echo $line | awk '{print $3}')
                            TOTALADA_AF+=($TXAMT)
                            TXCOUNT=$[$TXCOUNT+1]
                        fi

                    done <<< "${UTXO_AF}"

                    TOTALADA_AF_DONE=$(IFS=+; echo "$((${TOTALADA_AF[*]}))")

                    if [[ "$TOTALADA_AF_DONE" != "$TOTALADA" ]]; then
                        TX_DONE="TRUE"
                    fi

                    rm -rf $CARDO_HOME/transactions/${ADDR_NAME}/utxo${i}

                done

                i=$(($i + 1))
                TXDONEDATE=$(date +%T)
                echo -e "Transaction for $ADDR_NAME CONFIRMED at $TXDONEDATE!"

                line_number=$(cat $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv | wc -l)

                echo "$line_number,`echo "scale = 2; $TOTALADA / 1000000" | bc`,`echo "scale = 3; $TXFEE / 1000000" | bc | sed 's/^\$CARDO_HOME/0$CARDO_HOME/'`,$PAYMENT_ADDR,$OUTPUT_ADDR,$(date +%T)" >> $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
            
            fi

            rm -rf $CARDO_HOME/transactions/${ADDR_NAME}/*

        done

    done
}

function newmultisend {

    ADDR_LIST=($(ls $CARDO_HOME/wallets/$1*.addr))

    for addr in "${ADDR_LIST[@]}"
    do 

        PAYMENT_ADDR=$(cat $addr)
        ADDR_NAME=${addr#$CARDO_HOME/wallets/}
        ADDR_NAME=${ADDR_NAME%%.addr}

        if [ ! -f $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv ]; then
            touch $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
            echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/${ADDR_NAME}_tx_log.csv
        fi

        cardobot nochecksend ${ADDR_NAME} 1 $2 $3 $4 &

    done

}

function check {
    wallet_addr=$(cat $CARDO_HOME/wallets/$1.addr)

    echo -e "\nWallet Address: $wallet_addr"

    if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
        UTXO=$(curl -s -H "project_id: $BLOCKFROST_PROJECT_ID" https://cardano-mainnet.blockfrost.io/api/v0/addresses/${wallet_addr}/utxos)
    else
        UTXO=$(cardano-cli query utxo ${NODE_MAGIC} --address ${wallet_addr} | grep lovelace | tr '+' '\n')
    fi

    TOTALADA_BF=()
    TXPOLIC_BF=()
    TXTOKAMT=()

    if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
        
        TXHASH_ARR=($(echo ${UTXO} | jq -r .[].tx_hash 2> /dev/null))
        TXID_ARR=($(echo ${UTXO} | jq -r .[].tx_index 2> /dev/null))
        TXAMT_ARR=($(echo ${UTXO} | jq -c .[].amount 2> /dev/null))

        x=0

        for llamount in "${TXAMT_ARR[@]}"; do

            TXAMT=$(echo $llamount | jq -r '.[] | select(.unit=="lovelace") | .quantity')
            TOTALADA_BF+=($TXAMT)

            TXTOK=($(echo $llamount | jq -c '.[] | select(.unit!="lovelace")'))

            if [[ ! -z "${TXTOK[*]}" ]]; then

                for tok in "${TXTOK[@]}"; do
                    TXTOK_UNIT=$(echo "${tok}" | jq -r .unit)
                    TXTOK_AMT=$(echo "${tok}" | jq -r .quantity)

                    TXTOK_POL=${TXTOK_UNIT::56}
                    TXTOK_ID=${TXTOK_UNIT:56}

                    TXPOLIC_BF+=("${TXTOK_POL}.${TXTOK_ID}")
                    TXPOLIC_BF_NODOT+=("${TXTOK_POL}${TXTOK_ID}")
                done

            fi     

        done

        TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
        TXPOLIC_NODOT=($(echo "${TXPOLIC_BF_NODOT[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

        for tok in "${TXPOLIC_NODOT[@]}"; do
            TOKAMT_BF=($(echo ${TXAMT_ARR[*]} | jq -r ".[] | select(.unit==\"$tok\") | .quantity"))
            TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
        done

    else

        while IFS= read -r line; do

            if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                TXAMT=$(echo $line | awk '{print $3}')
                TOTALADA_BF+=($TXAMT)
            elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
            fi

        done <<< "${UTXO}"

        TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

        for tok in ${TXPOLIC[@]}; do
            TOKLIST=$(echo "${UTXO}" | grep -w $tok)
            TOKAMT_BF=()

            while IFS= read -r line; do
                TOKAMT_BF+=($(echo $line | awk '{print $1}'))
            done <<< "${TOKLIST}"

            TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
        done

    fi

    TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")
    num=0

    SENDSELF=()

    while [[ $num -lt ${#TXPOLIC[@]} ]]; do
        SENDSELF+=("${TXTOKAMT[$num]} ${TXPOLIC[$num]}\n")

        num=$[$num+1]
    done

    TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")

    echo -e "Remaining ADA: `echo "scale = 2; $TOTALADA / 1000000" | bc`\n"

    if [[ "${#TXPOLIC[@]}" == "0" ]]; then
        echo -e "NFTs in Wallet: None\n"
    else
        echo -e "NFTs in Wallet:\n ${SENDSELF[@]}"
    fi
}

function checkall {
    wallet_name=$1

    if [[ ! -z "$1" ]]; then
        check_wallet=($(cd $CARDO_HOME/wallets/ && ls ${wallet_name}*.addr 2>/dev/null))
    else
        check_wallet=($(cd $CARDO_HOME/wallets/ && ls *.addr 2>/dev/null))
    fi

    if [[ -z "${check_wallet[*]}" ]]; then

        echo -e "\nNo wallets found starting with \"${wallet_name}\" ..."

    fi

    for addr in "${check_wallet[@]}"; do

        wallet_addr=$(cat $CARDO_HOME/wallets/$addr)

        echo -e "\n${addr%.*} | $wallet_addr"

        if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
            UTXO=$(curl -s -H "project_id: $BLOCKFROST_PROJECT_ID" https://cardano-mainnet.blockfrost.io/api/v0/addresses/${wallet_addr}/utxos)
        else
            UTXO=$(cardano-cli query utxo ${NODE_MAGIC} --address ${wallet_addr} | grep lovelace | tr '+' '\n')
        fi

        TOTALADA_BF=()
        TXPOLIC_BF=()
        TXPOLIC_BF_NODOT=()
        TXTOKAMT=()

        if [[ ${BLOCKFROST_ENABLED} == 'true' ]]; then
            
            TXHASH_ARR=($(echo ${UTXO} | jq -r .[].tx_hash 2> /dev/null))
            TXID_ARR=($(echo ${UTXO} | jq -r .[].tx_index 2> /dev/null))
            TXAMT_ARR=($(echo ${UTXO} | jq -c .[].amount 2> /dev/null))

            x=0

            for llamount in "${TXAMT_ARR[@]}"; do

                TXAMT=$(echo $llamount | jq -r '.[] | select(.unit=="lovelace") | .quantity')
                TOTALADA_BF+=($TXAMT)

                TXTOK=($(echo $llamount | jq -c '.[] | select(.unit!="lovelace")'))

                if [[ ! -z "${TXTOK[*]}" ]]; then

                    for tok in "${TXTOK[@]}"; do
                        TXTOK_UNIT=$(echo "${tok}" | jq -r .unit)
                        TXTOK_AMT=$(echo "${tok}" | jq -r .quantity)

                        TXTOK_POL=${TXTOK_UNIT::56}
                        TXTOK_ID=${TXTOK_UNIT:56}

                        TXPOLIC_BF+=("${TXTOK_POL}.${TXTOK_ID}")
                        TXPOLIC_BF_NODOT+=("${TXTOK_POL}${TXTOK_ID}")
                    done

                fi     

            done

            TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
            TXPOLIC_NODOT=($(echo "${TXPOLIC_BF_NODOT[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

            for tok in "${TXPOLIC_NODOT[@]}"; do
                TOKAMT_BF=($(echo ${TXAMT_ARR[*]} | jq -r ".[] | select(.unit==\"$tok\") | .quantity"))
                TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
            done

        else

            while IFS= read -r line; do

                if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                    TXAMT=$(echo $line | awk '{print $3}')
                    TOTALADA_BF+=($TXAMT)
                elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                    TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
                fi

            done <<< "${UTXO}"

            TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

            for tok in ${TXPOLIC[@]}; do
                TOKLIST=$(echo "${UTXO}" | grep -w $tok)
                TOKAMT_BF=()

                while IFS= read -r line; do
                    TOKAMT_BF+=($(echo $line | awk '{print $1}'))
                done <<< "${TOKLIST}"

                TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
            done

        fi
        
        num=0

        SENDSELF=()

        while [[ $num -lt ${#TXPOLIC[@]} ]]; do
            SENDSELF+=("${TXTOKAMT[$num]} ${TXPOLIC[$num]}\n")

            num=$[$num+1]
        done

        TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")

        echo -e "Remaining ADA: `echo "scale = 2; $TOTALADA / 1000000" | bc`"

        if [[ "${#TXPOLIC[@]}" == "0" ]]; then
            echo -e "NFTs in Wallet: None"
        else
            echo -e "NFTs in Wallet:\n ${SENDSELF[@]}"
        fi

    done

    echo ""
}

function generate {
    wallet_name=$1
    check_wallet=`ls $CARDO_HOME/wallets/${wallet_name}.addr 2>/dev/null`

    if [[ ! -z ${check_wallet} ]]; then
        echo "Wallet already exists!!"
        exit
    else

        cardano-cli address key-gen --verification-key-file $CARDO_HOME/wallets/${wallet_name}.vkey --signing-key-file $CARDO_HOME/wallets/${wallet_name}.skey
        cardano-cli stake-address key-gen --verification-key-file $CARDO_HOME/wallets/${wallet_name}_stake.vkey --signing-key-file $CARDO_HOME/wallets/${wallet_name}_stake.skey
        cardano-cli address build --payment-verification-key-file $CARDO_HOME/wallets/${wallet_name}.vkey --stake-verification-key-file $CARDO_HOME/wallets/${wallet_name}_stake.vkey --out-file $CARDO_HOME/wallets/${wallet_name}.addr ${NODE_MAGIC}

        echo -e "\nYour Wallet Address is:\n`cat $CARDO_HOME/wallets/${wallet_name}.addr`"
        echo -e ""
    
    fi
}

function purge {
    wallet_name=$1
    
    echo -e "WARNING!!! - If you have not backed up this wallet, it will PERMANENTLY no longer be accessible.\nType 'agree' to continue...\n"

    read agreetodelete

    if [[ "${agreetodelete}" == "agree" ]]; then

        check_wallet=`ls $CARDO_HOME/wallets/${wallet_name}.addr 2>/dev/null`

        if [[ ! -z ${check_wallet} ]]; then
        
            rm -rf $CARDO_HOME/wallets/${wallet_name}.vkey
            rm -rf $CARDO_HOME/wallets/${wallet_name}.skey
            rm -rf $CARDO_HOME/wallets/${wallet_name}_stake.vkey
            rm -rf $CARDO_HOME/wallets/${wallet_name}_stake.skey
            rm -rf $CARDO_HOME/wallets/${wallet_name}.addr

            echo "Wallet $wallet_name has been permanently deleted..."
        else
            echo "Wallet does not exist!!"
            exit
        fi
    
    else

        echo -e "Did not agree to delete... Exiting..."
        exit

    fi   

}

function multipurge {
    wallet_name=$1
    
    echo -e "WARNING!!! - If you have not backed up these wallets, ALL will PERMANENTLY no longer be accessible.\nType 'agree' to continue...\n"

    read agreetodelete

    if [[ "${agreetodelete}" == "agree" ]]; then

        check_wallet=($(cd $CARDO_HOME/wallets/ && ls ${wallet_name}*.addr 2>/dev/null))

        if [[ ! -z "${check_wallet[*]}" ]]; then

            for wallet in "${check_wallet[@]}"; do

                rm -rf $CARDO_HOME/wallets/${wallet%.*}.vkey
                rm -rf $CARDO_HOME/wallets/${wallet%.*}.skey
                rm -rf $CARDO_HOME/wallets/${wallet%.*}_stake.vkey
                rm -rf $CARDO_HOME/wallets/${wallet%.*}_stake.skey
                rm -rf $CARDO_HOME/wallets/${wallet%.*}.addr

                echo -e "Wallet ${wallet%.*} has been permanently deleted..."

            done
        else
            echo "Wallets do not exist!!"
            exit
        fi
    
    else

        echo -e "Did not agree to delete... Exiting..."
        exit
        
    fi   

}

function multigen {
    wallet_name=$1
    wallet_num=$2

    i=0

    rm -rf ./${wallet_name}_addrlist
    touch ./${wallet_name}_addrlist

    while [[ $i -lt $wallet_num ]];
    do

        if [[ ! -z `ls $CARDO_HOME/wallets/${wallet_name}${i}.addr 2>/dev/null` ]]; then

            echo "${wallet_name}${i} already exists... Proceeding..."
            echo -e `cat $CARDO_HOME/wallets/${wallet_name}${i}.addr` >> ./${wallet_name}_addrlist

        else

            cardano-cli address key-gen --verification-key-file $CARDO_HOME/wallets/${wallet_name}${i}.vkey --signing-key-file $CARDO_HOME/wallets/${wallet_name}${i}.skey
            cardano-cli stake-address key-gen --verification-key-file $CARDO_HOME/wallets/${wallet_name}${i}_stake.vkey --signing-key-file $CARDO_HOME/wallets/${wallet_name}${i}_stake.skey
            cardano-cli address build --payment-verification-key-file $CARDO_HOME/wallets/${wallet_name}${i}.vkey --stake-verification-key-file $CARDO_HOME/wallets/${wallet_name}${i}_stake.vkey --out-file $CARDO_HOME/wallets/${wallet_name}${i}.addr ${NODE_MAGIC}

            echo -e "\nWallet Address for ${wallet_name}${i}:\n`cat $CARDO_HOME/wallets/${wallet_name}${i}.addr`"

            echo -e `cat $CARDO_HOME/wallets/${wallet_name}${i}.addr` >> ./${wallet_name}_addrlist
    
        fi

        i=$(($i + 1))

    done
}

function regen_test {
    wallet_name=$1

    cardano-cli address key-gen --verification-key-file $CARDO_HOME/wallets/${wallet_name}_temp.vkey --signing-key-file $CARDO_HOME/wallets/${wallet_name}_temp.skey
    cardano-cli address build --payment-verification-key-file $CARDO_HOME/wallets/${wallet_name}_temp.vkey --stake-verification-key-file $CARDO_HOME/wallets/${wallet_name}_stake.vkey --out-file $CARDO_HOME/wallets/${wallet_name}_temp.addr ${NODE_MAGIC}

    echo -e "\nYour Wallet Address is:\n`cat $CARDO_HOME/wallets/${wallet_name}_temp.addr`"
}

function list {

    if [[ ! -z "$1" ]]; then
        wallet_list=($(cd $CARDO_HOME/wallets/ && ls $1*.addr 2>/dev/null))
    else
        wallet_list=($(cd $CARDO_HOME/wallets/ && ls *.addr 2>/dev/null))
    fi

    if [[ ! -z "${wallet_list[@]}" ]]; then

        echo -e "\nList of Wallets:\n"

        for wallet in "${wallet_list[@]}"; do
            echo -e "${wallet} | `cat $CARDO_HOME/wallets/$wallet`"
        done
    
    else

        echo -e "\nNo wallets found starting with \"$1\" ...\n"

    fi
}

function logs {
    cat $CARDO_HOME/logs/$1_tx_log.csv
}

function version {
    echo "cardobot $version - by elegroth"
}

function upgrade {

    echo -e "Would you like to try upgrading cardobot?\ny/n"
    read upanswer

    if [[ $upanswer == "y" ]]; then
        current_dir=$(pwd)

        git clone git@github.com:Elegroth/cardobot.git /tmp/cardobot
        cd /tmp/cardobot && sed -i -e 's/\r$//' ./INSTALL && sed -i -e 's/\r$//' ./bin/cardobot && ./INSTALL
        rm -rf /tmp/cardobot

        cd $current_dir

    else
        echo -e "\nNot upgrading... Exiting..."
        exit
    fi

}

function helpme {

    printf "\nHow to use Cardobot...\n\nValid Options:
  \e[3mcheck\e[0m\n   - used to check ada and tokens in a wallet
  \e[3mgenerate\e[0m\n   - used to generate a new wallet address
  \e[3mlogs\e[0m\n   - used to output the logs for an address in csv format
  \e[3msend\e[0m\n   - used to send a transaction X number of times to an output address
  \e[3mmultisend\e[0m\n   - used to send a single transaction from all addresses starting with a name to an output address
  \e[3mempty\e[0m\n   - used to empty a wallet to an output address
  \e[3mlist\e[0m\n   - used to list existing wallets\n
eg.\n  \e[1mcardobot check terrence1\e[0m\n    (checks the balance of the wallet terrence1)\n\n  \e[1mcardobot generate terrence2\e[0m\n    (generates a new wallet called terrence2)\n\n  \e[1mcardobot logs terrence1\e[0m\n    (outputs the logs of the terrence1 wallet in csv format)\n\n  \e[1mcardobot send terrence1 2 5 addrxxxxxxxxx\e[0m\n    (sends from the terrence1 wallet 2 transactions of 5 ADA to the address)\n\n  \e[1mcardobot multisend terrence 5 addrxxxxxxxxx\e[0m\n    (sends from all wallets that start with terrence 5 ADA to the address)\n\n"

}


if [[ "$1" == "send" ]]; then
    send $2 $3 $4 $5 $6
elif [[ "$1" == "nochecksend" ]]; then
    nochecksend $2 $3 $4 $5 $6
elif [[ "$1" == "multisend" ]]; then
    multisend $2 $3 $4 $5
elif [[ "$1" == "multiout" ]]; then
    multiout $2 $3 $4 $5
elif [[ "$1" == "multiempty" ]]; then
    multiempty $2 $3
elif [[ "$1" == "newmultisend" ]]; then
    newmultisend $2 $3 $4 $5 $6
elif [[ "$1" == "empty" ]]; then
    empty $2 $3
elif [[ "$1" == "check" ]]; then
    check $2
elif [[ "$1" == "generate" ]]; then
    generate $2
elif [[ "$1" == "regen" ]]; then
    regen_test $2
elif [[ "$1" == "logs" ]]; then
    logs $2
elif [[ "$1" == "list" ]]; then
    list $2
elif [[ "$1" == "checkall" ]]; then
    checkall $2
elif [[ "$1" == "purge" ]]; then
    purge $2
elif [[ "$1" == "upgrade" ]]; then
    upgrade
elif [[ "$1" == "multipurge" ]]; then
    multipurge $2
elif [[ "$1" == "multigen" ]]; then
    multigen $2 $3
elif [[ "$1" =~ ^(--help|-help|-h|--h|help) ]]; then
    helpme
elif [[ "$1" =~ ^(--version|-version|-v|--v|version) ]]; then
    version
else
    echo "COMMAND NOT VALID!!!  EXITING..."
    exit
fi