#!/bin/bash
#set -x

mkdir -p $CARDO_HOME/transactions/
mkdir -p $CARDO_HOME/wallets/
mkdir -p $CARDO_HOME/logs/

function send {
    
    PAYMENT_ADDR=$(cat $CARDO_HOME/wallets/$1.addr)
    OUTPUT_ADDR=$4
    ADA_OUT=$(echo "($3 * 1000000) / 1" | bc)

    i=0

    if [ ! -f $CARDO_HOME/logs/$1_tx_log.csv ]; then
        touch $CARDO_HOME/logs/$1_tx_log.csv
        echo "txid,ada_sent,fees,from_addr,to_addr,timestamp" > $CARDO_HOME/logs/$1_tx_log.csv
    fi

    while [ $i -lt $2 ]; do

        UTXO=$(cardano-cli query utxo --mainnet --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')

        TOTALADA_BF=()
        TXPOLIC_BF=()
        TXIN=()
        TXCOUNT=0

        while IFS= read -r line; do

            if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                TXHASH=$(echo $line | awk '{print $1}')
                TXID=$(echo $line | awk '{print $2}')
                TXAMT=$(echo $line | awk '{print $3}')

                TXIN+=("--tx-in \"${TXHASH}#${TXID}\"")
                TOTALADA_BF+=($TXAMT)
                TXCOUNT=$[$TXCOUNT+1]
            elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
                TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
            fi

        done <<< "${UTXO}"

        TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

        TXTOKAMT=()

        for tok in ${TXPOLIC[@]}; do
            TOKLIST=$(echo "${UTXO}" | grep $tok)
            TOKAMT_BF=()

            while IFS= read -r line; do
                TOKAMT_BF+=($(echo $line | awk '{print $1}'))
            done <<< "${TOKLIST}"

            TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
        done

        TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")
        num=0

        SENDALL=""
        SENDSELF=""

        while [[ $num -lt ${#TXPOLIC[@]} ]]; do
            if [[ "$5" == "--send-all" ]]; then
                SENDALL="${SENDALL}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
            else
                SENDSELF="${SENDSELF}+\"${TXTOKAMT[$num]} ${TXPOLIC[$num]}\""
            fi

            num=$[$num+1]
        done

        cardano-cli query protocol-parameters \
        --mainnet \
        --out-file $CARDO_HOME/transactions/protocol${i}.json

        echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADA_OUT}${SENDALL} --tx-out ${PAYMENT_ADDR}+0${SENDSELF} --fee 0 --out-file $CARDO_HOME/transactions/tx${i}.draft" > $CARDO_HOME/transactions/build_draft_${i}.sh
        chmod 755 $CARDO_HOME/transactions/build_draft_${i}.sh
        $CARDO_HOME/transactions/build_draft_${i}.sh

        cardano-cli transaction calculate-min-fee \
        --tx-body-file $CARDO_HOME/transactions/tx${i}.draft \
        --tx-in-count $TXCOUNT \
        --tx-out-count 1 \
        --witness-count $TXCOUNT \
        --byron-witness-count 0 \
        --mainnet \
        --protocol-params-file $CARDO_HOME/transactions/protocol${i}.json | tee $CARDO_HOME/transactions/fees${i}

        TXFEE=$(cat $CARDO_HOME/transactions/fees${i} | awk '{print $1}')
        ADABACK=$(($TOTALADA - $ADA_OUT - $TXFEE))

        echo "cardano-cli transaction build-raw ${TXIN[*]} --tx-out ${OUTPUT_ADDR}+${ADA_OUT}${SENDALL} --tx-out ${PAYMENT_ADDR}+${ADABACK}${SENDSELF} --fee ${TXFEE} --out-file $CARDO_HOME/transactions/tx${i}.raw" > $CARDO_HOME/transactions/build_raw_${i}.sh
        chmod 755 $CARDO_HOME/transactions/build_raw_${i}.sh
        $CARDO_HOME/transactions/build_raw_${i}.sh

        cardano-cli transaction sign \
        --tx-body-file $CARDO_HOME/transactions/tx${i}.raw \
        --signing-key-file $CARDO_HOME/wallets/$1.skey \
        --mainnet \
        --out-file $CARDO_HOME/transactions/tx${i}.signed

        cardano-cli transaction submit \
        --tx-file $CARDO_HOME/transactions/tx${i}.signed \
        --mainnet

        TXSENTDATE=$(date +%T)
        echo "Transaction #`expr $i + 1` SENT at $TXSENTDATE!"

        TX_DONE="FALSE"

        while [[ "$TX_DONE" == "FALSE" ]]; do

            UTXO_AF=$(cardano-cli query utxo --mainnet --address ${PAYMENT_ADDR} | grep lovelace | tr '+' '\n')

            TOTALADA_AF=()

            while IFS= read -r line; do

                if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
                    TXAMT=$(echo $line | awk '{print $3}')
                    TOTALADA_AF+=($TXAMT)
                    TXCOUNT=$[$TXCOUNT+1]
                fi

            done <<< "${UTXO_AF}"

            TOTALADA_AF_DONE=$(IFS=+; echo "$((${TOTALADA_AF[*]}))")

            if [[ "$TOTALADA_AF_DONE" != "$TOTALADA" ]]; then
                TX_DONE="TRUE"
            fi

            rm -rf $CARDO_HOME/transactions/utxo_after${i}

        done

        i=$[$i+1]
        TXDONEDATE=$(date +%T)
        echo -e "Transaction #$i CONFIRMED at $TXDONEDATE!\n"

        rm -rf $CARDO_HOME/transactions/*

        line_number=$(cat $CARDO_HOME/logs/$1_tx_log.csv | wc -l)

        echo "$line_number,`echo "scale = 2; $ADA_OUT / 1000000" | bc`,`echo "scale = 3; $TXFEE / 1000000" | bc | sed 's/^\$CARDO_HOME/0$CARDO_HOME/'`,$PAYMENT_ADDR,$OUTPUT_ADDR,$(date +%T)" >> $CARDO_HOME/logs/$1_tx_log.csv

    done
}

function check {
    wallet_addr=$(cat $CARDO_HOME/wallets/$1.addr)

    echo -e "\nWallet Address: $wallet_addr"

    UTXO=$(cardano-cli query utxo --mainnet --address ${wallet_addr} | grep lovelace | tr '+' '\n')

    TOTALADA_BF=()
    TXPOLIC_BF=()

    while IFS= read -r line; do

        if [[ `echo $line | awk '{print $1}'` =~ ^[[:xdigit:]]{64}$ ]]; then
            TXAMT=$(echo $line | awk '{print $3}')
            TOTALADA_BF+=($TXAMT)
        elif [[ `echo $line | awk '{print $1}'` != "TxOutDatumNone" ]]; then
            TXPOLIC_BF+=($(echo $line | awk '{print $2}'))
        fi

    done <<< "${UTXO}"

    TXPOLIC=($(echo "${TXPOLIC_BF[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

    TXTOKAMT=()

    for tok in ${TXPOLIC[@]}; do
        TOKLIST=$(echo "${UTXO}" | grep $tok)
        TOKAMT_BF=()

        while IFS= read -r line; do
            TOKAMT_BF+=($(echo $line | awk '{print $1}'))
        done <<< "${TOKLIST}"

        TXTOKAMT+=($(IFS=+; echo "$((${TOKAMT_BF[*]}))"))
    done

    TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")
    num=0

    SENDSELF=()

    while [[ $num -lt ${#TXPOLIC[@]} ]]; do
        SENDSELF+=("${TXTOKAMT[$num]} ${TXPOLIC[$num]}\n")

        num=$[$num+1]
    done

    TOTALADA_BF=($(cardano-cli query utxo --mainnet --address ${wallet_addr} | grep lovelace | awk '{print $3}'))
    TOTALADA=$(IFS=+; echo "$((${TOTALADA_BF[*]}))")

    echo -e "Remaining ADA: `echo "scale = 2; $TOTALADA / 1000000" | bc`\n"

    if [[ "${#TXPOLIC[@]}" == "0" ]]; then
        echo -e "NFTs in Wallet: None\n"
    else
        echo -e "NFTs in Wallet:\n ${SENDSELF[@]}"
    fi
}

function generate {
    wallet_name=$1

    if [[ ! -z `ls $CARDO_HOME/wallets/${wallet_name}.addr` ]]; then
        echo "Wallet already exists!!"
        exit
    else

        cardano-cli address key-gen --verification-key-file $CARDO_HOME/wallets/${wallet_name}.vkey --signing-key-file $CARDO_HOME/wallets/${wallet_name}.skey
        cardano-cli stake-address key-gen --verification-key-file $CARDO_HOME/wallets/${wallet_name}_stake.vkey --signing-key-file $CARDO_HOME/wallets/${wallet_name}_stake.skey
        cardano-cli address build --payment-verification-key-file $CARDO_HOME/wallets/${wallet_name}.vkey --stake-verification-key-file $CARDO_HOME/wallets/${wallet_name}_stake.vkey --out-file $CARDO_HOME/wallets/${wallet_name}.addr --mainnet

        echo -e "\nYour Wallet Address is:\n`cat $CARDO_HOME/wallets/${wallet_name}.addr`"
    
    fi
}

function regen_test {
    wallet_name=$1

    cardano-cli address key-gen --verification-key-file $CARDO_HOME/wallets/${wallet_name}_temp.vkey --signing-key-file $CARDO_HOME/wallets/${wallet_name}_temp.skey
    cardano-cli address build --payment-verification-key-file $CARDO_HOME/wallets/${wallet_name}_temp.vkey --stake-verification-key-file $CARDO_HOME/wallets/${wallet_name}_stake.vkey --out-file $CARDO_HOME/wallets/${wallet_name}_temp.addr --mainnet

    echo -e "\nYour Wallet Address is:\n`cat $CARDO_HOME/wallets/${wallet_name}_temp.addr`"
}

function list {
    wallet_list=$(cd $CARDO_HOME/wallets/ && ls *.addr)

    echo -e "\nList of Wallets:\n\n${wallet_list}"
}

function logs {
    cat $CARDO_HOME/logs/$1_tx_log.csv
}

function helpme {

    printf "\nHow to use Cardobot...\n\nValid Options:
  \e[3mcheck\e[0m\n   - used to check ada and tokens in a wallet
  \e[3mgenerate\e[0m\n   - used to generate a new wallet address
  \e[3mlogs\e[0m\n   - used to output the logs for an address in csv format
  \e[3msend\e[0m\n   - used to send a transaction X number of times to an output address
  \e[3mlist\e[0m\n   - used to list existing wallets\n
eg.\n  \e[1mcardobot check terrence1\e[0m\n    (checks the balance of the wallet terrence1)\n\n  \e[1mcardobot generate terrence2\e[0m\n    (generates a new wallet called terrence2)\n\n  \e[1mcardobot logs terrence1\e[0m\n    (outputs the logs of the terrence1 wallet in csv format)\n\n  \e[1mcardobot send terrence1 2 5 addrxxxxxxxxx\e[0m\n    (sends from the terrence1 wallet 2 transactions of 5 ADA to the address)\n\n"

}


if [[ "$1" == "send" ]]; then
    send $2 $3 $4 $5 $6
elif [[ "$1" == "check" ]]; then
    check $2
elif [[ "$1" == "generate" ]]; then
    generate $2
elif [[ "$1" == "regen" ]]; then
    regen_test $2
elif [[ "$1" == "logs" ]]; then
    logs $2
elif [[ "$1" == "list" ]]; then
    list
elif [[ "$1" =~ ^(--help|-help|-h|--h|help) ]]; then
    helpme
else
    echo "COMMAND NOT VALID!!!  EXITING..."
    exit
fi